// admin/admin.js ‚Äî –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å credentials

let tasks = [];
const tasksList = document.getElementById('tasks-list');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π
async function loadTasks() {
  try {
    const response = await fetch('/tasks.json');
    if (!response.ok) throw new Error('Network error');
    const data = await response.json();
    tasks = Array.isArray(data.priority_tasks) ? data.priority_tasks : [];
    renderTasks();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
    tasks = [];
    renderTasks();
    alert('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
function renderTasks() {
  tasksList.innerHTML = '';
  tasks.forEach((task, index) => {
    const taskEl = document.createElement('div');
    taskEl.className = 'task';
    taskEl.innerHTML = `
      <div>
        <input type="text" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" value="${escapeHtml(task.title || '')}" oninput="updateTask(${index}, 'title', this.value)">
        
        <select onchange="updateTask(${index}, 'type', this.value)">
          <option value="subscribe" ${task.type === 'subscribe' ? 'selected' : ''}>–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</option>
          <option value="buy" ${task.type === 'buy' ? 'selected' : ''}>–ö—É–ø–∏—Ç—å</option>
          <option value="question" ${task.type === 'question' ? 'selected' : ''}>–í–æ–ø—Ä–æ—Å</option>
        </select>
        
        <input type="text" placeholder="–°—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)" value="${escapeHtml(task.link || '')}" oninput="updateTask(${index}, 'link', this.value)">
        
        <input type="text" placeholder="–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤)" value="${escapeHtml(task.correct_answer || '')}" oninput="updateTask(${index}, 'correct_answer', this.value)">
      </div>
      <button onclick="removeTask(${index})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    `;
    tasksList.appendChild(taskEl);
  });
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS)
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –∑–∞–¥–∞–Ω–∏—è
function updateTask(index, field, value) {
  if (tasks[index]) {
    tasks[index][field] = value;
  }
}

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
function addTask() {
  tasks.push({
    title: '',
    type: 'question',
    link: '',
    correct_answer: ''
  });
  renderTasks();
  tasksList.lastElementChild.scrollIntoView({ behavior: 'smooth' });
}

// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
function removeTask(index) {
  if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?')) {
    tasks.splice(index, 1);
    renderTasks();
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è
async function saveTasks() {
  const password = prompt("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:");
  if (!password) {
    alert('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    return;
  }

  try {
    const response = await fetch('/save-tasks', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ password, priority_tasks: tasks }),
      credentials: 'include' // üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É–∫–∏
    });

    const data = await response.json();

    if (data.success) {
      alert('‚úÖ –ó–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    } else {
      alert(`‚ùå ${data.message}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    alert('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
window.onload = loadTasks;
